
////slip17 Q1/////


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 200

typedef struct dir
{
	char fname[20];
	int start,length;
	struct dir *next;
}NODE;

NODE *first,*last;
int bit[MAX],n;
void init()
{
	int i;
	printf("Enter total no of disc blocks: ");
	scanf("%d",&n);
	for(i=0;i<10;i++)
	{
		int k=rand()%2;
		bit[k]=1;
	}
}
void show_bitvector()
{
	int i;
	for(i=0;i<n;i++)
	{
		printf("%d",bit[i]);
	}
	printf("\n");
}
void show_dir()
{
	NODE *p;
	printf("file\tstart\tno_of_entries\n");
	p=first;
	while(p!=NULL)
	{
		printf("%s\t%d\t%d\n",p->fname,p->start,p->length);
		p=p->next;
	}
}
void create()
{
	NODE *p;
	char fname[20];
	int nob,i=0,j=0,start;
	printf("Enter the file name: ");
	scanf("%s",fname);
	printf("Enter no of blocks: ");
	scanf("%d",&nob);
	while(1)
	{
		while(i<n)
		{
			if(bit[i]==0)
			break;
			i++;
		}
		if(i<n)
		{
			start=i;
			j=1;
			while(j<nob && i<n && bit[i]==0)
			{
				i++;
				j++;
			}
			if(j==nob)
			{
				p=(NODE*)malloc(sizeof(NODE));
				strcpy(p->fname,fname);
				p->start=start;
				p->length=nob;
				p->next=NULL;
				if(first==NULL)
					first=p;
				else
					last->next=p;
					last=p;
				for(j=0;j<nob;j++)
				bit[j+start]=i;
				printf("file %s created successfully\n",fname);
				return;
			}
		}
		else
		{
			printf("failed to create file %s\n",fname);
			return;
		}
	}
}
void delete()
{
	NODE *p,*q;
	char fname[20];
	int i;
	printf("Enter file to be deleted: ");
	scanf("%s",fname);
	p=q=first;
	while(p!=NULL)
	{
		if(strcmp(p->fname,fname)==0)
		break;
		q=p;
		p=p->next;
	}
	if(p==NULL)
	{
		printf("file %s not found\n",fname);
		return;
	}
	for(i=0;i<p->length;i++)
	bit[p->start+i]=0;
	if(p==first)
		first=first->next;
	else
		if(p==last)
		{
			last=q;
			last->next=NULL;
		}
		else
		{
			q->next=p->next;
		}
		free(p);
		printf("file %s deleted  successfully \n",fname);
}
int main()
{
	int ch;
	init();
	while(1)
	{
		printf("1.show bit vector\n2.create new file\n3.show directory\n4.delete file\n5.exit\n");
		printf("Enter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:show_bitvector();
				break;
			case 2:create();		
				break;
			case 3:show_dir();
				break;
			case 4:delete();
				break;
			case 5:exit(0);
		}
	}
	return 0;
}
	
////slip17 Q1/////

#include<stdio.h>
#include<stdlib.h>
int main()
{
	int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
	printf("Enter the number of requests: \n");
	scanf("%d",&n);
	printf("Enter the Request sequence: \n");
	for(i=0;i<n;i++)
	scanf("%d",&RQ[i]);
	printf("Enter initial head position: \n");
	scanf("%d",&initial);
	printf("Enter total disk size: \n");
	scanf("%d",&size);
	printf("Enter the head movement direction for high 1 and for low 0 \n");
	scanf("%d",&move);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(RQ[j]>RQ[j+1])
			{
				int temp;
				temp=RQ[j];
				RQ[j]=RQ[j+1];
				RQ[j+1]=temp;
			}
		}
	}
	int index;
	for(i=0;i<n;i++)
	{
		if(initial<RQ[i])
		{
			index=i;
			break;
		}
	}
	if(move==1)
	{
		for(i=index;i<n;i++)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
		
		for(i=index-1;i>=0;i--)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
	}
	else
	{
		for(i=index-1;i>=0;i--)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
		for(i=index;i<n;i++)
		{
			TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
			initial=RQ[i];
		}
	}
	printf("Total head moment is %d",TotalHeadMoment);
	return 0;
}

	
	

			

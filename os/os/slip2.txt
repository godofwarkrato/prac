
/////slip2 Q1/////

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 200

typedef struct dir
{
	char fname[20];
	int start;
	struct dir *next;
}NODE;

NODE *first,*last;
int bit[MAX],n,fb;
void init()
{
	int i;
	printf("Enter total no of disc blocks: ");
	scanf("%d",&n);
	fb=n;
	for(i=0;i<10;i++)
	{
		int k=rand()%n;
		bit[k]=-2;
		if(bit[k]!=-2)
		{
			fb--;
		}
	}
}
void show_bitvector()
{
	int i;
	for(i=0;i<n;i++)
	{
	printf("%d",bit[i]);
	}	
	printf("\n");
}
void show_dir()
{
	NODE *p;
	int i;
	printf("file\t chain\n");
	p=first;
	while(p!=NULL)
	{
		printf("%s\t",p->fname);
		i=p->start;
		while(i!=-1)
		{
			printf("%d->",i);
			i=bit[i];
		}
			printf("NULL\n");
			p=p->next;
	}
}
void create()
{
	NODE *p;
	char fname[20];
	int nob,i,j;
	printf("Enter the file name: ");
	scanf("%s",fname);
	printf("Enter no of blocks: ");
	scanf("%d",&nob);
	if(nob>fb)
	{
		printf("failed to create file %s\n",fname);
		return;
	}
	for(i=0;i<n;i++)
	{
		if(bit[i]==0)
		break;
	}
	p=(NODE*)malloc(sizeof(NODE));
	strcpy(p->fname,fname);
	p->start=i;
	p->next=NULL;
		if(first==NULL)
			first=p;
		else
			last->next=p;
			fb=nob;
			j=i+1;
			nob--;
			while(nob>0)
			{	
				if(bit[j]==0)
				{
					bit[i]=j;
					i=j;
					nob--;
				}
				j++;
			}
			bit[i]=-1;
			printf("file %s created successfully\n",fname);
}
void delete()
{
	NODE *p,*q;
	char fname[20];
	int i,j,nob=0;
	printf("Enter files to be deleted: ");
	scanf("%s",fname);
	p=q=first;
	while(p!=NULL)
	{
		if(strcmp(p->fname,fname)==0)
		break;
		q=p;
		p=p->next;
	}
	if(p==NULL)
	{
		printf("file %s not found\n",fname);
		return;
	}
	i=p->start;
	while(i!=-1)
	{
		nob++;
		j=i;
		i=bit[i];
		bit[j]=0;
	}
	fb+=nob;
	if(p==first)
		first=first->next;
	else
		if(p==last)
		{
			last=q;
			last->next=NULL;
		}
		else
		{
			q->next=p->next;
		}
		free(p);
		printf("file %s deleted successfully\n",fname);
}
int main()
{
	int ch;
	init();
	while(1)
	{
		printf("1.show bit vector\n2.create new file\n3.show directory\n4.delete file\n5.exit\n");
		printf("Enter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:show_bitvector();
				break;
			case 2:create();		
				break;
			case 3:show_dir();
				break;
			case 4:delete();
				break;
			case 5:exit(0);
		}
	}
	return 0;
}
	
	
////slip2 Q2****////
///////////////////////////////
run cmd :- mpicc filename.c  
./a.out
///////////////////////////////////////////////////////////////////
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
  
// size of array
#define n 10
  
int a[] = {1, 3, 5, 10, 12, 20, 4, 50, 100, 1000};
  
// Temporary array for slave process
int a2[1000];
  
int main(int argc, char* argv[])
{
  
    int pid, np,
        elements_per_process,
        n_elements_recieved;
    // np -> no. of processes
    // pid -> process id
  
    MPI_Status status;
  
    // Creation of parallel processes
    MPI_Init(&argc, &argv);
  
    // find out process ID,
    // and how many processes were started
    MPI_Comm_rank(MPI_COMM_WORLD, &pid);
    MPI_Comm_size(MPI_COMM_WORLD, &np);
  
    // master process
    if (pid == 0) {
        int index, i;
        elements_per_process = n / np;
  
        // check if more than 1 processes are run
        if (np > 1) {
            // distributes the portion of array
            // to child processes to calculate
            // their partial sums
            for (i = 1; i < np - 1; i++) {
                index = i * elements_per_process;
  
                MPI_Send(&elements_per_process,
                         1, MPI_INT, i, 0,
                         MPI_COMM_WORLD);
                MPI_Send(&a[index],
                         elements_per_process,
                         MPI_INT, i, 0,
                         MPI_COMM_WORLD);
            }
  
            // last process adds remaining elements
            index = i * elements_per_process;
            int elements_left = n - index;
  
            MPI_Send(&elements_left,
                     1, MPI_INT,
                     i, 0,
                     MPI_COMM_WORLD);
            MPI_Send(&a[index],
                     elements_left,
                     MPI_INT, i, 0,
                     MPI_COMM_WORLD);
        }
  
        // master process add its own sub array
        int sum = 0;
        for (i = 0; i < elements_per_process; i++)
            sum += a[i];
  
        // collects partial sums from other processes
        int tmp;
        for (i = 1; i < np; i++) {
            MPI_Recv(&tmp, 1, MPI_INT,
                     MPI_ANY_SOURCE, 0,
                     MPI_COMM_WORLD,
                     &status);
            int sender = status.MPI_SOURCE;
  
            sum += tmp;
        }
  
        // prints the final sum of array
        printf("Sum of array is : %d\n", sum);
    }
    // slave processes
    else {
        MPI_Recv(&n_elements_recieved,
                 1, MPI_INT, 0, 0,
                 MPI_COMM_WORLD,
                 &status);
  
        // stores the received array segment
        // in local array a2
        MPI_Recv(&a2, n_elements_recieved,
                 MPI_INT, 0, 0,
                 MPI_COMM_WORLD,
                 &status);
  
        // calculates its partial sum
        int partial_sum = 0;
        for (int i = 0; i < n_elements_recieved; i++)
            partial_sum += a2[i];
  
        // sends the partial sum to the root process
        MPI_Send(&partial_sum, 1, MPI_INT,
                 0, 0, MPI_COMM_WORLD);
    }
  
    // cleans up all MPI state before exit of process
    MPI_Finalize();
  
    return 0;
}
/*
nput : {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
Output : Sum of array is 55

Input : {1, 3, 5, 10, 12, 20, 4, 50, 100, 1000}
Output : Sum of array is 1205

mpicc Ass4mpical.c -o cal
dell@dell-OptiPlex-3046:~/SSKare$ mpirun -np 2 ./cal
Sum of array is : 55

*/

